name: Publish Docker Image to GHCR

on:
  push:
    branches: [ "main" ]
    tags:
      - "v*"
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    outputs:
      version: ${{ steps.pkg_version.outputs.image_version }}
      create_release: ${{ steps.is_tag.outputs.is_tag }}
      release_version: ${{ steps.is_tag.outputs.tag_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate package.json and extract version
        id: pkg_version
        run: |
          if [[ ! -f package.json ]]; then
            echo "❌ package.json not found"
            exit 1
          fi

          VERSION=$(jq -r .version package.json)
          if [[ -z "$VERSION" || "$VERSION" == "null" ]]; then
            echo "❌ Failed to extract version from package.json"
            exit 1
          fi

          if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-.+)?$'; then
            echo "❌ Version '$VERSION' is not a valid semver (e.g. 1.2.3)"
            exit 1
          fi

          echo "✅ Version extracted: $VERSION"
          echo "image_version=$VERSION" >> $GITHUB_OUTPUT

      # - name: Determine if this is a git tag
      #   id: is_tag
      #   run: |
      #     if [[ $GITHUB_REF == refs/tags/* ]]; then
      #       TAG_NAME=$(echo $GITHUB_REF | sed 's|refs/tags/v||;s|refs/tags/||')
      #       echo "is_tag=true" >> $GITHUB_OUTPUT
      #       echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
      #     else
      #       echo "is_tag=false" >> $GITHUB_OUTPUT
      #     fi

      - name: Determine if this is a git tag
        id: is_tag
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # Извлекаем только имя тега (например, v1.2.3), без refs/tags/
            TAG_NAME=$(echo $GITHUB_REF | sed 's|refs/tags/||')
            # Удаляем префикс "v" из имени тега для использования в Docker
            TAG_NAME_STRIPPED=$(echo $TAG_NAME | sed 's/^v//')
            echo "is_tag=true" >> $GITHUB_OUTPUT
            echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "tag_name_stripped=$TAG_NAME_STRIPPED" >> $GITHUB_OUTPUT
            echo "✅ Detected tag: $TAG_NAME"
            echo "✅ Stripped tag: $TAG_NAME_STRIPPED"
          else
            echo "is_tag=false" >> $GITHUB_OUTPUT
            echo "➡️  Not a tag push, skipping release"
          fi

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create secrets directory
        run: |
          mkdir -p /tmp/secrets
          echo "${{ secrets.BUILD_SECRET }}" > /tmp/secrets/build-secret.txt

      - name: Prepare metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.pkg_version.outputs.image_version }}
            type=raw,value=latest,enable=${{ steps.is_tag.outputs.is_tag }}
            # type=sha,prefix=sha-

      # - name: Build and push
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     file: Dockerfile
      #     push: true
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}
      #     build-args: |
      #       APP_VERSION=${{ steps.pkg_version.outputs.image_version }}
      #     secrets: |
      #       build_secret=/tmp/secrets/build-secret.txt

      # - name: Create GitHub Release
      #   if: ${{ steps.is_tag.outputs.is_tag }}
      #   uses: softprops/action-gh-release@v2
      #   with:
      #     # tag_name: ${{ github.ref }}
      #     tag_name: ${{ steps.is_tag.outputs.tag_name }}
      #     name: Release ${{ steps.is_tag.outputs.tag_name }}
      #     body: |
      #       Published Docker image:
      #       ```
      #       ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.pkg_version.outputs.image_version }}
      #       ```
      #     draft: false
      #     prerelease: ${{ contains(steps.is_tag.outputs.tag_name, '-') }}
